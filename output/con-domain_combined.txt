package main

import (
	"html/template"
	"io"
	"log"
	"net/http"
	"os"
	"time"

	api "github.com/robstave/rto/internal"

	"github.com/labstack/echo/v4"
	"github.com/robstave/rto/internal/adapters/controller"
	"github.com/robstave/rto/logger"
	slogecho "github.com/samber/slog-echo"
)

// TemplateRenderer is a custom renderer for Echo
type TemplateRenderer struct {
	templates *template.Template
}

// Render renders a template document
func (t *TemplateRenderer) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
	return t.templates.ExecuteTemplate(w, name, data)
}

func main() {

	// Read DB_PATH from environment variable, set a default if not provided
	dbPath := os.Getenv("DB_PATH")
	if dbPath == "" {
		dbPath = "./data/db.sqlite3" // Default path
	}

	slogger := logger.InitializeLogger()
	logger.SetLogger(slogger) // Optional: If you prefer setting a package-level logger
	rtoClt := controller.NewRTOController(dbPath, slogger)

	// Initialize session middleware with a cookie store

	e := api.GetEcho(rtoClt)
	mw := slogecho.New(slogger)
	e.Use(mw)

	//e.Use(session.Middleware(sessions.NewCookieStore([]byte())))

	funcMap := template.FuncMap{
		"formatDate": func(t time.Time, layout string) string {
			return t.Format(layout)
		},
	}

	// Parse the templates with custom functions
	renderer := &TemplateRenderer{
		templates: template.Must(template.New("").Funcs(funcMap).ParseGlob("templates/*.html")),
	}
	e.Renderer = renderer

	log.Println("templates loaded")

	log.Println("starting")
	// Start the server on port 8761
	if err := e.Start(":8761"); err != nil && err != http.ErrServerClosed {
		log.Fatal("shutting down the server")
	}

}


=== End of cmd/main/main.go ===

package api

import (
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"

	"github.com/gorilla/sessions"

	"github.com/labstack/echo-contrib/session"
	"github.com/robstave/rto/internal/adapters/controller"
)

func GetEcho(rtoCtl *controller.RTOController) *echo.Echo {

	e := echo.New()

	// Middleware (optional)
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	//e.Pre(middleware.RemoveTrailingSlash())
	// CORS
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins: []string{"*"},
		AllowMethods: []string{"*"},
	}))

	store := sessions.NewCookieStore([]byte("    ffffff"))
	store.Options = &sessions.Options{
		Path: "/",
		//Domain:   "192.168.86.176", // Update as per your domain
		MaxAge:   86400 * 7, // 7 days
		HttpOnly: true,
		Secure:   false,                // Set to true in production (requires HTTPS)
		SameSite: http.SameSiteLaxMode, // Adjust as needed
	}
	e.Use(session.Middleware(store))

	// Static files
	e.Static("/static", "static")

	// Public Routes
	e.GET("/login", rtoCtl.ShowLoginForm)
	e.POST("/login", rtoCtl.ProcessLogin)
	e.GET("/logout", rtoCtl.Logout)

	// Group protected routes
	r := e.Group("")
	r.Use(rtoCtl.AuthMiddleware)

	r.GET("/add-event", rtoCtl.ShowAddEventForm) //  show add event form
	r.POST("/add-event", rtoCtl.AddEvent)        //  handle form submission

	r.GET("/events", rtoCtl.EventsList)
	r.GET("/prefs", rtoCtl.ShowPrefs)
	r.POST("/prefs/update", rtoCtl.UpdatePreferences) // New route for updating preferences

	// Routes
	r.GET("/", rtoCtl.Home)
	r.GET("", rtoCtl.Home)

	r.POST("/toggle-attendance", rtoCtl.ToggleAttendance)

	r.POST("/prefs/add-default-days", rtoCtl.AddDefaultDays)
	r.DELETE("/events/delete/:id", rtoCtl.DeleteEvent)
	r.POST("/add-events-json", rtoCtl.BulkAddEventsJSON)

	r.DELETE("/events/clear/:date", rtoCtl.ClearEventsForDate)

	r.GET("/export/markdown", rtoCtl.ExportEventsMarkdown)

	r.GET("/chart-data", rtoCtl.GetChartData)

	return e
}


=== End of internal/echo-routes.go ===

package types

import (
	"fmt"
	"time"
)

type Event struct {
	ID          uint      `gorm:"primaryKey" json:"id"`
	Date        time.Time `gorm:"type:date;not null"` // Use 'date' type to store only the date
	Description string    `gorm:"type:varchar(255);not null"`
	Type        string    `gorm:"type:varchar(50);not null"` // "holiday", "vacation", "attendance"
	IsInOffice  bool      `gorm:"default:false"`             // Relevant for "attendance" type
}

func (e Event) String() string {
	return fmt.Sprintf("Event{ID: %d, Date: %s, Description: %q, IsInOffice: %t, Type: %q}",
		e.ID,
		e.Date.Format("2006-01-02"),
		e.Description,
		e.IsInOffice,
		e.Type)
}

type Preferences struct {
	ID          uint   `gorm:"primaryKey" json:"id"`
	DefaultDays string `json:"defaultDays"` // e.g., "M,T,W,Th,F"
	TargetDays  string `json:"targetDays"`  // e.g., "2.5"
}

// CalendarDay represents a single day in the calendar
type CalendarDay struct {
	Date      time.Time
	InMonth   bool
	Today     bool
	Events    []Event
	IsWeekend bool //
	IsFuture  bool // future days

}

type AttendanceStats struct {
	InOfficeCount  int
	TotalDays      int
	Average        float64
	AverageDays    float64
	TargetDays     float64
	AveragePercent float64
}

type BulkAddResult struct {
	Date        string `json:"date"`
	Action      string `json:"action"`
	Description string `json:"description,omitempty"`
	Error       string `json:"error,omitempty"`
}

// BulkAddResponse encapsulates the overall result of a bulk add operation
type BulkAddResponse struct {
	Success bool            `json:"success"`
	Added   int             `json:"added"`
	Updated int             `json:"updated"`
	Skipped int             `json:"skipped"`
	Message string          `json:"message"`
	Results []BulkAddResult `json:"results"`
}


=== End of internal/domain/types/types.go ===

package domain

import (
	"fmt"
	"strings"

	"github.com/robstave/rto/internal/domain/types"
)

// BulkAddEvents processes a list of vacation events, adding or updating them based on existing events
func (s *Service) BulkAddEvents(events []types.Event) (*types.BulkAddResponse, error) {
	// Initialize counters and result list
	var addedCount, updatedCount, skippedCount int
	var failedEvents []string
	var results []types.BulkAddResult

	s.logger.Info("---BulkAddEvents----", "events", len(events))

	for _, event := range events {
		date := event.Date
		dateStr := date.Format("2006-01-02")
		eventsOnDate, err := s.eventRepo.GetEventsByDate(date)
		if err != nil && !s.IsRecordNotFoundError(err) {
			s.logger.Error("--Error fetching events by date", "date", date, "error", err)
			failedEvents = append(failedEvents, dateStr)
			results = append(results, types.BulkAddResult{
				Date:  dateStr,
				Error: "Error fetching events for this date.",
			})
			continue
		}

		var holidayExists, vacationExists bool
		var attendanceEvent *types.Event

		for _, e := range eventsOnDate {
			switch strings.ToLower(e.Type) {
			case "holiday":
				holidayExists = true
			case "vacation":
				vacationExists = true
			case "attendance":
				attendanceEvent = &e
			}
		}

		if holidayExists {
			// Skip adding/updating if a holiday exists on the date
			skippedCount++
			results = append(results, types.BulkAddResult{
				Date:   dateStr,
				Action: "Skipped (Holiday exists)",
			})
			continue
		}

		if vacationExists {
			// Update the existing vacation event
			existingVacation, err := s.GetEventByDateAndType(date, "vacation")
			if err != nil {
				s.logger.Error("Error fetching existing vacation event", "date", date, "error", err)
				failedEvents = append(failedEvents, dateStr)
				results = append(results, types.BulkAddResult{
					Date:  dateStr,
					Error: "Error fetching existing vacation event.",
				})
				continue
			}

			existingVacation.Description = event.Description
			err = s.UpdateEvent(*existingVacation)
			if err != nil {
				s.logger.Error("Failed to update existing vacation event", "event", existingVacation, "error", err)
				failedEvents = append(failedEvents, dateStr)
				results = append(results, types.BulkAddResult{
					Date:  dateStr,
					Error: "Failed to update existing vacation event.",
				})
				continue
			}
			updatedCount++
			results = append(results, types.BulkAddResult{
				Date:        dateStr,
				Action:      "Updated existing vacation",
				Description: existingVacation.Description,
			})
			continue
		}

		if attendanceEvent != nil {
			// Update the attendance event to a vacation
			s.logger.Info("+++update", "event", event.String())

			attendanceEvent.Type = "vacation"
			attendanceEvent.Description = event.Description
			err = s.UpdateEvent(*attendanceEvent)
			if err != nil {
				s.logger.Error("Failed to update attendance event to vacation", "event", attendanceEvent, "error", err)
				failedEvents = append(failedEvents, dateStr)
				results = append(results, types.BulkAddResult{
					Date:  dateStr,
					Error: "Failed to transform attendance event to vacation.",
				})
				continue
			}
			updatedCount++
			results = append(results, types.BulkAddResult{
				Date:        dateStr,
				Action:      "Transformed attendance to vacation",
				Description: attendanceEvent.Description,
			})
			continue
		}

		// If no events exist on that date, add the vacation event
		err = s.AddEvent(event)
		if err != nil {
			s.logger.Error("Failed to add vacation event", "event", event, "error", err)
			failedEvents = append(failedEvents, dateStr)
			results = append(results, types.BulkAddResult{
				Date:  dateStr,
				Error: "Failed to add vacation event.",
			})
			continue
		}
		addedCount++
		results = append(results, types.BulkAddResult{
			Date:        dateStr,
			Action:      "Added new vacation",
			Description: event.Description,
		})
	}

	// Prepare the response message
	messageParts := []string{}
	if addedCount > 0 {
		messageParts = append(messageParts, fmt.Sprintf("Successfully added %d vacation event(s).", addedCount))
	}
	if updatedCount > 0 {
		messageParts = append(messageParts, fmt.Sprintf("Successfully updated %d event(s).", updatedCount))
	}
	if skippedCount > 0 {
		messageParts = append(messageParts, fmt.Sprintf("Skipped %d event(s) due to existing holidays.", skippedCount))
	}
	if len(failedEvents) > 0 {
		messageParts = append(messageParts, fmt.Sprintf("Failed to process events on dates: %s.", strings.Join(failedEvents, ", ")))
	}

	message := strings.Join(messageParts, " ")

	// Create the BulkAddResponse
	response := &types.BulkAddResponse{
		Success: true,
		Added:   addedCount,
		Updated: updatedCount,
		Skipped: skippedCount,
		Message: message,
		Results: results,
	}

	return response, nil
}

// IsRecordNotFoundError checks if an error is a record not found error
func (s *Service) IsRecordNotFoundError(err error) bool {
	return strings.Contains(err.Error(), "record not found")
}


=== End of internal/domain/bulkadd.go ===

//go:generate mockery --name RTOBLL
package domain

import (
	"log/slog"
	"time"

	repository "github.com/robstave/rto/internal/adapters/repositories"
	"github.com/robstave/rto/internal/domain/types"
)

// Interface for the RTO Business logic
type RTOBLL interface {
	GetAllEvents() []types.Event
	GetPrefs() types.Preferences
	ToggleAttendance(eventDate time.Time) (string, error)
	AddEvent(event types.Event) error
	CalculateAttendanceStats() (*types.AttendanceStats, error)
	UpdatePreferences(defaultDays string, targetDays string) error
	AddDefaultDays() error
	DeleteEvent(eventID int) error
	GetEventByID(eventID int) (types.Event, error)
	TransformVacationToRemote(eventID int) error
	GetEventByDateAndType(date time.Time, eventType string) (*types.Event, error)
	GetEventsByDate(date time.Time) ([]types.Event, error)
	ClearEventsForDate(date time.Time) error

	UpdateEvent(event types.Event) error
	BulkAddEvents(events []types.Event) (*types.BulkAddResponse, error)
}

type Service struct {
	preferences    types.Preferences
	logger         *slog.Logger
	eventRepo      repository.EventRepository
	preferenceRepo repository.PreferenceRepository
}

func NewService(
	logger *slog.Logger,
	eventRepo repository.EventRepository,
	preferenceRepo repository.PreferenceRepository,
) RTOBLL {

	service := Service{
		logger:         logger,
		eventRepo:      eventRepo,
		preferenceRepo: preferenceRepo,
	}

	service.preferences = initializePreferences(&service)

	return &service
}


=== End of internal/domain/service.go ===

package domain

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/robstave/rto/internal/domain/types"
	"github.com/robstave/rto/internal/utils"
	"gorm.io/gorm"
)

func (s *Service) GetAllEvents() []types.Event {
	events, err := s.eventRepo.GetAllEvents()
	if err != nil {
		s.logger.Error("Error getting events", "error", err)
		return []types.Event{}
	}
	return events
}
func (s *Service) GetPrefs() types.Preferences {
	prefs, err := s.preferenceRepo.GetPreferences()
	if err != nil {
		s.logger.Error("Error getting preferences", "error", err)
		// Return default preferences or handle error as needed
	}
	return prefs
}

// AddEvent adds a new event or updates an existing one based on the event type and date
func (s *Service) AddEvent(event types.Event) error {

	event.Date = utils.NormalizeDate(event.Date)

	if event.Type == "vacation" {
		// Check if a vacation event already exists on the given date
		existingEvent, err := s.eventRepo.GetEventByDateAndType(event.Date, "vacation")
		if err != nil && err != gorm.ErrRecordNotFound {
			s.logger.Error("Error fetching existing vacation event", "error", err)
			return err
		}

		if existingEvent.ID != 0 {
			// Vacation event exists; update the description
			existingEvent.Description = event.Description
			err = s.eventRepo.UpdateEvent(existingEvent)
			if err != nil {
				s.logger.Error("Error updating vacation event", "error", err)
				return err
			}
			s.logger.Info("Vacation event updated", "date", event.Date)
			return nil
		}
	} else if event.Type == "attendance" {
		s.logger.Info("ADding Attendence", "date", event.Date, "type", event.Type)

		// Check if an attendance event already exists on the given date
		existingEvent, err := s.eventRepo.GetEventByDateAndType(event.Date, "attendance")
		if err != nil && err != gorm.ErrRecordNotFound {
			s.logger.Error("Error fetching existing attendance event", "error", err)
			return err
		}

		s.logger.Info("doing add", "existingEvent", existingEvent.ID)

		if existingEvent.ID != 0 {
			// Attendance event exists; do not add a duplicate
			s.logger.Info("Attendance event already exists", "date", event.Date.Format("2006-01-02"))
			return nil // Alternatively, return a custom error if you want to notify the controller
		}
	}

	s.logger.Info("doing add", "date", event.Date, "type", event.Type)

	// No existing event; proceed to add the new event
	err := s.eventRepo.AddEvent(event)
	if err != nil {
		s.logger.Error("Error adding event", "error", err)
		return err
	}
	s.logger.Info("Event added", "date", event.Date.Format("2006-01-02"), "type", event.Type)
	return nil
}

// ClearEventsForDate clears all events for a specific date
func (s *Service) ClearEventsForDate(date time.Time) error {
	events, err := s.eventRepo.GetEventsByDate(date)
	s.logger.Info("0000-----ClearEventsForDate------", "date", date, "len", len(events))

	if err != nil {
		s.logger.Error("Error fetching events for date", "date", date, "error", err)
		return err
	}

	for _, event := range events {
		s.logger.Info("000bbbb0-----deletin------", "len", int(event.ID))

		err := s.eventRepo.DeleteEvent(int(event.ID))
		if err != nil {
			s.logger.Error("Error deleting event", "eventID", event.ID, "error", err)
			return err
		}
	}

	s.logger.Info("All events cleared for date", "date", date.Format("2006-01-02"))
	return nil
}

func (s *Service) AddDefaultDays() error {
	s.logger.Info("AddDefaultDays triggered")

	// Get current preferences
	prefs, err := s.preferenceRepo.GetPreferences()
	if err != nil {
		s.logger.Error("Failed to get preferences", "error", err)
		return err
	}

	// Parse default days
	defaultDays := strings.Split(prefs.DefaultDays, ",")
	defaultDaysMap := make(map[string]bool)
	for _, day := range defaultDays {
		day = strings.TrimSpace(strings.ToLower(day))
		defaultDaysMap[day] = true
	}

	// Define the date range
	currentYear := time.Now().Year()
	startDate := time.Date(currentYear, time.October, 1, 0, 0, 0, 0, time.UTC)

	endDate := time.Date(currentYear, time.December, 31, 0, 0, 0, 0, time.UTC)

	// Retrieve existing events
	existingEvents, err := s.eventRepo.GetAllEvents()
	if err != nil {
		s.logger.Error("Failed to retrieve events", "error", err)
		return err
	}

	// Create a map of existing event dates
	existingEventDates := make(map[string]bool)
	for _, event := range existingEvents {
		dateStr := event.Date.Format("2006-01-02")
		existingEventDates[dateStr] = true
	}

	// Add default attendance events
	addedCount := 0
	for d := startDate; !d.After(endDate); d = d.AddDate(0, 0, 1) {
		// Map Go's Weekday to user's day abbreviations
		var dayAbbrev string
		switch d.Weekday() {
		case time.Monday:
			dayAbbrev = "M"
		case time.Tuesday:
			dayAbbrev = "T"
		case time.Wednesday:
			dayAbbrev = "W"
		case time.Thursday:
			dayAbbrev = "Th"
		case time.Friday:
			dayAbbrev = "F"
		case time.Saturday:
			dayAbbrev = "Sat"
		case time.Sunday:
			dayAbbrev = "Sun"
		}
		dayAbbrevLower := strings.ToLower(dayAbbrev)

		// Skip weekends
		if d.Weekday() == time.Saturday || d.Weekday() == time.Sunday {
			continue
		}

		// Determine if it's a default in-office day
		isInOffice := defaultDaysMap[dayAbbrevLower]

		dateStr := d.Format("2006-01-02")
		if !existingEventDates[dateStr] {
			// Create a new attendance event
			newEvent := types.Event{
				Date:        d,
				Description: "",
				IsInOffice:  isInOffice,
				Type:        "attendance",
			}
			err := s.eventRepo.AddEvent(newEvent)
			if err != nil {
				s.logger.Error("Failed to add event", "date", dateStr, "error", err)
				continue
			}
			addedCount++
		}
	}

	s.logger.Info("AddDefaultDays completed", "events_added", addedCount)
	return nil
}

// GetEventByID retrieves a single event by its ID
func (s *Service) GetEventByID(eventID int) (types.Event, error) {
	event, err := s.eventRepo.GetEventByID(eventID)
	if err != nil {
		s.logger.Error("Error fetching event by ID", "error", err)
		return types.Event{}, err
	}
	return event, nil
}

// DeleteEvent deletes an event by its ID
func (s *Service) DeleteEvent(eventID int) error {
	// First, retrieve the event to ensure it exists and is deletable
	_, err := s.GetEventByID(eventID)
	if err != nil {
		return err
	}

	////if event.Type != "vacation" {
	//return errors.New("only vacation events can be deleted")
	//}

	// Proceed to delete the event
	err = s.eventRepo.DeleteEvent(eventID)
	if err != nil {
		s.logger.Error("Error deleting event", "error", err)
		return err
	}

	return nil
}

// UpdateEvent updates an existing event in the database
func (s *Service) UpdateEvent(event types.Event) error {
	if event.ID == 0 {
		return errors.New("event ID is required for update")
	}
	err := s.eventRepo.UpdateEvent(event)
	if err != nil {
		s.logger.Error("Failed to update event", "eventID", event.ID, "error", err)
		return err
	}
	return nil
}

// GetEventByDateAndType retrieves an event by date and type
func (s *Service) GetEventByDateAndType(date time.Time, eventType string) (*types.Event, error) {
	event, err := s.eventRepo.GetEventByDateAndType(date, eventType)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, fmt.Errorf("record not found")
		}
		return nil, err
	}
	return &event, nil
}

// GetEventsByDate retrieves all events for a specific date
func (s *Service) GetEventsByDate(date time.Time) ([]types.Event, error) {
	events, err := s.eventRepo.GetEventsByDate(date)
	if err != nil {
		s.logger.Error("Error fetching events by date", "date", date, "error", err)
		return nil, err
	}
	return events, nil
}


=== End of internal/domain/events.go ===

package domain

import (
	"encoding/json"
	"io/ioutil"

	"github.com/robstave/rto/internal/domain/types"
)

func (s *Service) UpdatePreferences(defaultDays string, targetDays string) error {
	// Fetch current preferences from the database
	prefs, err := s.preferenceRepo.GetPreferences()
	if err != nil {
		s.logger.Error("Error fetching preferences", "error", err)
		return err
	}

	// Update preferences fields
	prefs.DefaultDays = defaultDays
	prefs.TargetDays = targetDays

	// Save updated preferences back to the database
	if err := s.preferenceRepo.UpdatePreferences(prefs); err != nil {
		s.logger.Error("Error updating preferences in repository", "error", err)
		return err
	}

	// Update the service's local copy if necessary
	s.preferences = prefs

	return nil
}

func (s *Service) SavePreferences(filePath string) error {

	data, err := json.MarshalIndent(s.preferences, "", "    ")
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(filePath, data, 0644)
	if err != nil {
		return err
	}

	return nil
}

// InitializePreferences initializes preferences by loading the JSON file
func initializePreferences(s *Service) types.Preferences {
	prefs, err := s.preferenceRepo.GetPreferences()
	if err != nil {
		s.logger.Error("Error loading preferences from database", "error", err)

		// Set default preferences if loading fails or no preferences exist
		defaultPrefs := types.Preferences{
			DefaultDays: "M,T,W,Th,F", // Adjusted to include Monday by default
			TargetDays:  "2.5",
		}

		if err := s.preferenceRepo.UpdatePreferences(defaultPrefs); err != nil {
			s.logger.Error("Error setting default preferences in database", "error", err)
			// Handle as needed, possibly panic or return
		} else {
			s.logger.Info("Default preferences set in database.")
		}

		return defaultPrefs
	}

	s.logger.Info("Preferences loaded successfully from database.")
	return prefs
}


=== End of internal/domain/preferences.go ===

package domain

import (
	"errors"
	"strconv"
	"time"

	"github.com/robstave/rto/internal/domain/types"
	"github.com/robstave/rto/internal/utils"
)

func (s *Service) ToggleAttendance(eventDate time.Time) (string, error) {
	// Retrieve all events
	events, err := s.eventRepo.GetAllEvents()
	if err != nil {
		s.logger.Error("Error retrieving events", "error", err)
		return "", err
	}

	// Find the attendance event on the given date
	found := false
	var newStatus string
	var eventToUpdate types.Event

	for _, event := range events {
		if utils.SameDay(event.Date, eventDate) && event.Type == "attendance" {
			// Toggle the IsInOffice flag
			event.IsInOffice = !event.IsInOffice
			eventToUpdate = event
			if event.IsInOffice {
				newStatus = "in"
			} else {
				newStatus = "remote"
			}
			found = true

			s.logger.Info("xmxmxmx Toggle", "Date", event.Date, "ID", event.ID)

			break
		}
	}

	if !found {
		return "", errors.New("attendance event not found on the specified date")
	}

	// Update the event in the database
	err = s.eventRepo.UpdateEvent(eventToUpdate)
	if err != nil {
		s.logger.Error("Error updating event", "error", err)
		return "", err
	}

	return newStatus, nil
}

// CalculateAttendanceStats calculates all the stats
func (s *Service) CalculateAttendanceStats() (*types.AttendanceStats, error) {
	currentYear := time.Now().Year()
	startDate := time.Date(currentYear, time.October, 1, 0, 0, 0, 0, time.UTC)
	endDate := time.Date(currentYear, time.December, 31, 0, 0, 0, 0, time.UTC)

	// normalize ?

	allTheEvents, err := s.eventRepo.GetAllEvents()
	if err != nil {
		s.logger.Error("Error fetching  events", "error", err)
		return nil, err
	}
	inOfficeCount, totalDays := utils.CalculateInOfficeAverage(allTheEvents, startDate, endDate)

	average := 0.0
	averageDays := 0.0
	if totalDays > 0 {
		average = (float64(inOfficeCount) / float64(totalDays)) * 100
		averageDays = (float64(inOfficeCount) / float64(totalDays)) * 7 // Average days/week
	}

	// Fetch targetDays from preferences
	targetDaysStr := s.preferences.TargetDays
	targetDays, err := strconv.ParseFloat(targetDaysStr, 64)
	if err != nil {
		// Fallback to default target if parsing fails
		targetDays = 2.5
	}

	// Calculate Average Percent
	averagePercent := 0.0
	if targetDays > 0 {
		averagePercent = (averageDays / targetDays) * 100
	}

	return &types.AttendanceStats{
		InOfficeCount:  inOfficeCount,
		TotalDays:      totalDays,
		Average:        average,
		AverageDays:    averageDays,
		TargetDays:     targetDays,
		AveragePercent: averagePercent,
	}, nil
}


=== End of internal/domain/toggle.go ===

//go:generate mockery --name RTOBLL
package domain

import (
	"errors"

	"github.com/robstave/rto/internal/domain/types"
	"gorm.io/gorm"
)

// TransformVacationToRemote transforms a vacation event into a remote attendance day
func (s *Service) TransformVacationToRemote(eventID int) error {
	// Retrieve the vacation event by ID
	event, err := s.GetEventByID(eventID)
	if err != nil {
		return err // Event not found or other error
	}

	if event.Type != "vacation" {
		return errors.New("only vacation events can be transformed into remote days")
	}

	// Delete the vacation event
	err = s.eventRepo.DeleteEvent(eventID)
	if err != nil {
		s.logger.Error("Failed to delete vacation event", "eventID", eventID, "error", err)
		return err
	}

	// Check if an attendance event exists on that date
	existingAttendance, err := s.eventRepo.GetEventByDateAndType(event.Date, "attendance")
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			// No attendance event exists; create one as remote
			newAttendance := types.Event{
				Date:        event.Date,
				Description: "Remote day (transformed from vacation)",
				Type:        "attendance",
				IsInOffice:  false,
			}
			err = s.eventRepo.AddEvent(newAttendance)
			if err != nil {
				s.logger.Error("Failed to add new remote attendance event", "date", newAttendance.Date, "error", err)
				return err
			}
		} else {
			s.logger.Error("Error fetching attendance event by date", "date", event.Date, "error", err)
			return err
		}
	} else {
		// Update the existing attendance event to remote
		existingAttendance.IsInOffice = false
		existingAttendance.Description = "Remote day (transformed from vacation)"
		err = s.eventRepo.UpdateEvent(existingAttendance)
		if err != nil {
			s.logger.Error("Failed to update attendance event to remote", "eventID", existingAttendance.ID, "error", err)
			return err
		}
	}

	return nil
}


=== End of internal/domain/transform.go ===

package utils

import (
	"errors"
	"time"

	"github.com/robstave/rto/internal/domain/types"
)

// parseDate tries to parse a date string using multiple layouts.
// It returns the parsed time.Time or an error if none of the layouts match.
func ParseDate(dateStr string) (time.Time, error) {
	layouts := []string{
		"2006-01-02",          // "YYYY-MM-DD"
		time.RFC3339,          // "YYYY-MM-DDTHH:MM:SSZ"
		"2006-01-02T15:04:05", // "YYYY-MM-DDTHH:MM:SS"
	}

	for _, layout := range layouts {
		if t, err := time.Parse(layout, dateStr); err == nil {
			return t, nil
		}
	}

	return time.Time{}, errors.New("invalid date format")
}

// SameDay checks if two dates are on the same calendar day
func SameDay(a, b time.Time) bool {
	yearA, monthA, dayA := a.Date()
	yearB, monthB, dayB := b.Date()
	return yearA == yearB && monthA == monthB && dayA == dayB
}

// GetDateRange generates a slice of dates from start to end, inclusive
func GetDateRange(start, end time.Time) []time.Time {
	var dates []time.Time
	for d := start; !d.After(end); d = d.AddDate(0, 0, 1) {
		dates = append(dates, d)
	}
	return dates
}

// CalculateInOfficeAverage computes the number of in-office days and total days in the quarter
func CalculateInOfficeAverage(events []types.Event, startDate time.Time, endDate time.Time) (int, int) {
	// Define the quarter date range: October 1 to December 31 of the current year

	// Calculate total days in the quarter
	totalDays := int(endDate.Sub(startDate).Hours()/24) + 1 // +1 to include the end date

	inOfficeCount := 0

	// Iterate through all events and count in-office days within the quarter
	for _, event := range events {
		if event.Type == "attendance" && event.IsInOffice {
			if !event.Date.Before(startDate) && !event.Date.After(endDate) {
				inOfficeCount++
			}
		}
	}

	return inOfficeCount, totalDays
}

// GetCalendarMonth generates all weeks for the given month, including days from adjacent months
func GetCalendarMonth(currentDate time.Time) [][]types.CalendarDay {
	var weeks [][]types.CalendarDay

	// Normalize to the first day of the month
	firstOfMonth := time.Date(currentDate.Year(), currentDate.Month(), 1, 0, 0, 0, 0, currentDate.Location())

	// Find the first Sunday before or on the first day of the month
	weekday := firstOfMonth.Weekday()
	daysToSubtract := int(weekday) // Sunday = 0
	startDate := firstOfMonth.AddDate(0, 0, -daysToSubtract)

	for week := 0; week < 6; week++ { // Up to 6 weeks in a month view
		var weekDays []types.CalendarDay
		for day := 0; day < 7; day++ {
			currentDay := startDate.AddDate(0, 0, week*7+day)
			inMonth := currentDay.Month() == firstOfMonth.Month()
			weekDays = append(weekDays, types.CalendarDay{
				Date:      currentDay,
				InMonth:   inMonth,
				IsWeekend: IsWeekend(currentDay),
			})
		}
		weeks = append(weeks, weekDays)

		// Check if all days in the current week are from the next month
		allDaysNextMonth := true
		for _, day := range weekDays {
			if day.Date.Month() == firstOfMonth.Month() {
				allDaysNextMonth = false
				break
			}
		}

		if allDaysNextMonth {
			weeks = weeks[:len(weeks)-1] // Remove the last week added
			break
		}
	}

	return weeks
}

// IsWeekend returns true if the given date is Saturday or Sunday
func IsWeekend(date time.Time) bool {
	weekday := date.Weekday()
	return weekday == time.Saturday || weekday == time.Sunday
}

// NormalizeDate sets the time component of a date to midnight UTC
func NormalizeDate(date time.Time) time.Time {
	return time.Date(date.Year(), date.Month(), date.Day(), 0, 0, 0, 0, time.UTC)
}


=== End of internal/utils/utils.go ===

