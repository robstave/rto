package controller

import (
	"log/slog"

	repo "github.com/robstave/rto/internal/adapters/repositories"
	"github.com/robstave/rto/internal/domain"
	"github.com/robstave/rto/internal/domain/types"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

type RTOController struct {
	service domain.RTOBLL

	logger *slog.Logger
}

func NewRTOController(
	dbPath string,
	logger *slog.Logger,

) *RTOController {

	// Read DB_PATH from environment variable, set a default if not provided

	//db, err := gorm.Open(sqlite.Open("rto_attendance.db"), &gorm.Config{})
	//dbPath = dbPath + "/rto_attendance.db"
	logger.Info("creating Database", "db", dbPath)
	db, err := gorm.Open(sqlite.Open(dbPath), &gorm.Config{})

	if err != nil {
		logger.Error("Failed to connect to database", "error", err)
		panic("Failed to connect to database")
	}

	// Migrate the schema
	if err := db.AutoMigrate(&types.Event{}, &types.Preferences{}); err != nil {
		logger.Error("AutoMigrate failed", "error", err)
		panic("Failed to migrate database")
	}
	// Initialize repositories
	eventRepo := repo.NewEventRepositorySQLite(db)
	preferenceRepo := repo.NewPreferenceRepositorySQLite(db)

	// Insert default Preferences if none exist
	err = initializeDefaultPreferences(db, logger)
	if err != nil {
		logger.Error("Failed to initialize default preferences", "error", err)
		panic("Failed to initialize default preferences")
	}

	// Initialize holidays
	err = initializeHolidays(db, logger)
	if err != nil {
		logger.Error("Failed to initialize holidays", "error", err)
		panic("Failed to initialize holidays")
	}

	service := domain.NewService(
		logger,
		eventRepo,
		preferenceRepo,
	)

	return &RTOController{service, logger}
}

func NewRTOControllerWithMock(dbPath string, service domain.RTOBLL) *RTOController {
	return &RTOController{service, nil} // Pass a mock logger or nil if not used in tests
}


=== End of internal/adapters/controller/controller.go ===

package controller

import (
	"strconv"

	"net/http"

	"github.com/labstack/echo/v4"
)

// DeleteEvent handles deletion of a vacation event and transforms it into a remote day
func (ctlr *RTOController) DeleteEvent(c echo.Context) error {
	// Get the event ID from the URL parameter
	idParam := c.Param("id")
	eventID, err := strconv.Atoi(idParam)
	if err != nil {
		ctlr.logger.Error("Invalid event ID", "id", idParam, "error", err)
		return c.JSON(http.StatusBadRequest, map[string]interface{}{
			"success": false,
			"message": "Invalid event ID.",
		})
	}

	// Call the service to transform the vacation to remote
	err = ctlr.service.TransformVacationToRemote(eventID)
	if err != nil {
		ctlr.logger.Error("Error transforming vacation to remote", "eventID", eventID, "error", err)
		return c.JSON(http.StatusInternalServerError, map[string]interface{}{
			"success": false,
			"message": err.Error(),
		})
	}

	return c.JSON(http.StatusOK, map[string]interface{}{
		"success": true,
		"message": "Vacation day transformed into a remote day successfully.",
	})
}


=== End of internal/adapters/controller/delete.go ===

package controller

import (
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/robstave/rto/internal/domain/types"
)

// EventsList handles displaying the list of events
func (ctlr *RTOController) EventsList(c echo.Context) error {
	// Pass allEvents to the template
	data := map[string]interface{}{
		"Events": ctlr.service.GetAllEvents(),
	}

	return c.Render(http.StatusOK, "events.html", data)
}

// ShowAddEventForm renders the Add Event form
func (ctlr *RTOController) ShowAddEventForm(c echo.Context) error {
	return c.Render(http.StatusOK, "add_event.html", nil)
}

func (ctlr *RTOController) AddEvent(c echo.Context) error {
	dateStr := c.FormValue("date")   // Expected format: YYYY-MM-DD
	eventType := c.FormValue("type") // "holiday", "vacation", "attendance"
	description := c.FormValue("description")
	isInOfficeStr := c.FormValue("isInOffice") // "true" or "false"

	if dateStr == "" || eventType == "" {
		return c.JSON(http.StatusBadRequest, map[string]interface{}{
			"success": false,
			"message": "Date and Event Type are required",
		})
	}

	// Parse the date
	eventDate, err := time.Parse("2006-01-02", dateStr)
	if err != nil {
		ctlr.logger.Error("Error parsing date", "fn", "AddEvent", "date", err)
		return c.JSON(http.StatusBadRequest, map[string]interface{}{
			"success": false,
			"message": "Invalid date format",
		})
	}

	// Initialize Event struct
	newEvent := types.Event{
		Date:        eventDate,
		Description: description,
		Type:        eventType,
	}

	// Handle Attendance Type
	if eventType == "attendance" {
		if isInOfficeStr == "true" {
			newEvent.IsInOffice = true
		} else {
			newEvent.IsInOffice = false
		}
	}

	// Call domain service to add event
	err = ctlr.service.AddEvent(newEvent)
	if err != nil {
		ctlr.logger.Error("Error adding event", "error", err)
		// Check if the error is due to an existing attendance event
		// You can define custom errors in the service layer to handle this
		return c.JSON(http.StatusInternalServerError, map[string]interface{}{
			"success": false,
			"message": "Failed to add event.",
		})
	}

	// Determine the nature of the addition to provide appropriate feedback
	var message string
	if eventType == "vacation" {
		// Check if the description was updated or a new event was added
		existingEvent, err := ctlr.service.GetEventByDateAndType(eventDate, "vacation")
		if err == nil && existingEvent.ID != 0 && existingEvent.Description == description {
			message = "Vacation event updated successfully."
		} else {
			message = "Vacation event added successfully."
		}
	} else if eventType == "attendance" {
		// Since attendance events are not duplicated, confirm addition
		message = "Attendance event added successfully."
	} else {
		message = "Event added successfully."
	}

	// Redirect back to the calendar with a success message
	return c.Render(http.StatusOK, "home.html", map[string]interface{}{
		"Message": message,
	})
}

func (ctlr *RTOController) AddDefaultDays(c echo.Context) error {
	err := ctlr.service.AddDefaultDays()
	if err != nil {
		ctlr.logger.Error("Error adding default days", "error", err)
		return c.String(http.StatusInternalServerError, "Failed to add default attendance events.")
	}
	return c.Redirect(http.StatusSeeOther, "/prefs")
}

type RawEvent struct {
	Date        string `json:"date"`
	Description string `json:"description"`
	Type        string `json:"type"`
}

// BulkAddEventsJSONRequest represents the expected JSON payload for bulk adding events
type BulkAddEventsJSONRequest struct {
	Events []RawEvent `json:"events"`
}

// BulkAddEventsJSON handles the bulk addition of vacation events via JSON
func (ctlr *RTOController) BulkAddEventsJSON(c echo.Context) error {
	var rawEventsReq BulkAddEventsJSONRequest

	// Parse and decode the JSON request body into rawEvents
	if err := c.Bind(&rawEventsReq); err != nil {
		ctlr.logger.Error("Error binding bulk add JSON", "error", err)
		return c.JSON(http.StatusBadRequest, map[string]interface{}{
			"success": false,
			"message": "Invalid JSON payload.",
		})
	}

	var domainEvents []types.Event

	// Iterate over each raw event to validate and transform
	for i, rawEvent := range rawEventsReq.Events {
		// Basic validation
		if strings.TrimSpace(rawEvent.Date) == "" ||
			strings.TrimSpace(rawEvent.Description) == "" ||
			strings.TrimSpace(rawEvent.Type) == "" {
			ctlr.logger.Error("Incomplete event data in bulk add", "event_index", i, "event", rawEvent)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"success": false,
				"message": fmt.Sprintf("Event at index %d is missing required fields.", i),
			})
		}

		// Ensure the event type is 'vacation'
		if strings.ToLower(rawEvent.Type) != "vacation" {
			ctlr.logger.Error("Invalid event type in bulk add", "event_index", i, "event", rawEvent)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"success": false,
				"message": fmt.Sprintf("Only events with type 'vacation' can be bulk added (error at index %d).", i),
			})
		}

		// Validate and parse date (YYYY-MM-DD)
		parsedDate, err := time.Parse("2006-01-02", rawEvent.Date)
		if err != nil {
			ctlr.logger.Error("Invalid date format in bulk add", "event_index", i, "event", rawEvent, "error", err)
			return c.JSON(http.StatusBadRequest, map[string]interface{}{
				"success": false,
				"message": fmt.Sprintf("Invalid date format for event on %s. Expected YYYY-MM-DD.", rawEvent.Date),
			})
		}

		// Create domain Event
		domainEvent := types.Event{
			Date:        parsedDate, // Assuming types.Date is defined in the domain layer
			Description: rawEvent.Description,
			Type:        strings.ToLower(rawEvent.Type),
		}

		domainEvents = append(domainEvents, domainEvent)
	}

	// Delegate the processing to the service layer
	response, err := ctlr.service.BulkAddEvents(domainEvents)
	if err != nil {
		ctlr.logger.Error("Error in BulkAddEvents service method", "error", err)
		return c.JSON(http.StatusInternalServerError, map[string]interface{}{
			"success": false,
			"message": "An error occurred while processing bulk add events.",
		})
	}

	// Return the service layer's response
	return c.JSON(http.StatusOK, response)
}

// ClearEventsForDate handles clearing all events for a specific date
func (ctlr *RTOController) ClearEventsForDate(c echo.Context) error {
	dateParam := c.Param("date") // Expected format: YYYY-MM-DD

	if dateParam == "" {
		return c.JSON(http.StatusBadRequest, map[string]interface{}{
			"success": false,
			"message": "Date parameter is required.",
		})
	}

	// Parse the date
	eventDate, err := time.Parse("2006-01-02", dateParam)
	if err != nil {
		ctlr.logger.Error("Error parsing date", "fn", "ClearEventsForDate", "date", dateParam, "error", err)
		return c.JSON(http.StatusBadRequest, map[string]interface{}{
			"success": false,
			"message": "Invalid date format. Expected YYYY-MM-DD.",
		})
	}

	// Retrieve all events for the date
	err = ctlr.service.ClearEventsForDate(eventDate)
	if err != nil {
		ctlr.logger.Error("Error fetching events for date", "date", eventDate, "error", err)
		return c.JSON(http.StatusInternalServerError, map[string]interface{}{
			"success": false,
			"message": "Failed to fetClearch events for the date.",
		})
	}

	return c.JSON(http.StatusOK, map[string]interface{}{
		"success": true,
		"message": "All events for the selected date have been cleared.",
	})
}


=== End of internal/adapters/controller/events.go ===

// internal/adapters/controller/export.go

package controller

import (
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/labstack/echo/v4"
)

// ExportEventsMarkdown handles exporting all events as a Markdown list
func (ctlr *RTOController) ExportEventsMarkdown(c echo.Context) error {
	// Fetch all events from the service
	events := ctlr.service.GetAllEvents()

	if len(events) == 0 {
		return c.String(http.StatusOK, "No events available to export.")
	}

	// Build the Markdown content
	var sb strings.Builder
	// Add Export Date
	exportDate := time.Now().Format("January 2, 2006 at 3:04 PM")
	sb.WriteString(fmt.Sprintf("**Exported on:** %s\n\n", exportDate))

	sb.WriteString("# RTO Attendance Tracker - Events Export\n\n")
	sb.WriteString("## Events List\n\n")
	sb.WriteString("| Date | Type | Description | In Office |\n")
	sb.WriteString("| ---- | ---- | ----------- | --------- |\n")

	for _, event := range events {
		date := event.Date.Format("2006-01-02")
		eventType := strings.Title(event.Type)
		description := event.Description
		inOffice := "N/A"

		if event.Type == "attendance" {
			if event.IsInOffice {
				inOffice = "Yes"
			} else {
				inOffice = "No"
			}
		}

		// Escape pipe characters in description to prevent table formatting issues
		description = strings.ReplaceAll(description, "|", "\\|")

		sb.WriteString(fmt.Sprintf("| %s | %s | %s | %s |\n", date, eventType, description, inOffice))
	}

	markdownContent := sb.String()

	// Set the headers to prompt a file download
	c.Response().Header().Set(echo.HeaderContentDisposition, "attachment; filename=events_export.md")
	c.Response().Header().Set(echo.HeaderContentType, "text/markdown")
	return c.String(http.StatusOK, markdownContent)
}


=== End of internal/adapters/controller/export.go ===

package controller

import (
	"net/http"
	"strconv"

	"time"

	"github.com/robstave/rto/internal/domain/types"
	"github.com/robstave/rto/internal/utils"

	"github.com/labstack/echo/v4"
)

// Home renders the calendar on the home page
func (ctlr *RTOController) Home(c echo.Context) error {

	allEvents := ctlr.service.GetAllEvents()
	// Get current date or date from query parameters
	currentDate := time.Now()
	yearParam := c.QueryParam("year")
	monthParam := c.QueryParam("month")
	dayParam := c.QueryParam("day")

	if yearParam != "" && monthParam != "" && dayParam != "" {
		year, err1 := strconv.Atoi(yearParam)
		month, err2 := strconv.Atoi(monthParam)
		day, err3 := strconv.Atoi(dayParam)
		if err1 == nil && err2 == nil && err3 == nil {
			currentDate = time.Date(year, time.Month(month), day, 0, 0, 0, 0, currentDate.Location())
		}
	}

	// Generate calendar for the current month
	weeks := utils.GetCalendarMonth(currentDate)

	// Precompute formatted dates for navigation links
	prevMonthDate := currentDate.AddDate(0, -1, 0)
	nextMonthDate := currentDate.AddDate(0, 1, 0)

	// Define 'today' before the loop
	today := time.Now()
	today = time.Date(today.Year(), today.Month(), today.Day(), 0, 0, 0, 0, today.Location())

	// Assign events to the corresponding days
	for weekIdx, week := range weeks {
		for dayIdx, day := range week {
			dateStr := day.Date.Format("2006-01-02") // YYYY-MM-DD
			dayEvents := []types.Event{}

			for _, event := range allEvents {
				if event.Date.Format("2006-01-02") == dateStr {
					dayEvents = append(dayEvents, event)
				}
			}

			weeks[weekIdx][dayIdx].Events = dayEvents

			if day.Date.Equal(today) {
				weeks[weekIdx][dayIdx].Today = true
			} else if day.Date.After(today) && !weeks[weekIdx][dayIdx].IsWeekend {
				// Set IsFuture flag..but only for M-F
				weeks[weekIdx][dayIdx].IsFuture = true
			}

		}
	}

	currentYear := time.Now().Year()
	startDate := time.Date(currentYear, time.October, 1, 0, 0, 0, 0, time.UTC)
	endDate := time.Date(currentYear, time.December, 31, 0, 0, 0, 0, time.UTC)
	// Calculate In-Office Average
	inOfficeCount, totalDays := utils.CalculateInOfficeAverage(allEvents, startDate, endDate)

	average := 0.0
	averageDays := 0.0
	if totalDays > 0 {
		average = (float64(inOfficeCount) / float64(totalDays)) * 100
		averageDays = (float64(inOfficeCount) / float64(totalDays)) * 7 //average days/week
	}

	// Fetch target days from preferences

	currentPreferences := ctlr.service.GetPrefs()
	targetDaysFloat, _ := strconv.ParseFloat(currentPreferences.TargetDays, 64)

	data := map[string]interface{}{
		"CurrentDate": currentDate,
		"Weeks":       weeks,
		"PrevMonth": map[string]string{
			"year":  prevMonthDate.Format("2006"),
			"month": prevMonthDate.Format("01"),
			"day":   prevMonthDate.Format("02"),
		},
		"NextMonth": map[string]string{
			"year":  nextMonthDate.Format("2006"),
			"month": nextMonthDate.Format("01"),
			"day":   nextMonthDate.Format("02"),
		},
		"InOfficeCount": inOfficeCount,
		"TotalDays":     totalDays,
		"Average":       average,
		"AverageDays":   averageDays,
		"TargetDays":    targetDaysFloat,
		"Preferences":   currentPreferences, // Add Preferences here
	}

	//log
	/*
		for weekIdx, week := range weeks {
			for dayIdx, day := range week {
				// Existing event assignment logic

				// Debugging: Log events for each day
				if len(weeks[weekIdx][dayIdx].Events) > 0 {
					log.Printf("Date: %s, Events: %+v\n", day.Date.Format("2006-01-02"), weeks[weekIdx][dayIdx].Events)
				}
			}
		}
	*/

	ctlr.logger.Info("***********", "Average", average, "TotalDays", totalDays)

	// Render the template
	if err := c.Render(http.StatusOK, "home.html", data); err != nil {
		ctlr.logger.Error("Template rendering error:", "error", err)

		return c.String(http.StatusInternalServerError, "Internal Server Error")
	}

	return nil
}


=== End of internal/adapters/controller/home.go ===

package controller

import (
	"net/http"

	"log/slog"

	"github.com/labstack/echo/v4"

	"github.com/robstave/rto/internal/domain/types"

	"gorm.io/gorm"
)

// ShowPrefs renders the preferences page with current default in-office days and target
func (ctlr *RTOController) ShowPrefs(c echo.Context) error {

	data := map[string]interface{}{
		"Preferences": ctlr.service.GetPrefs(),
	}

	return c.Render(http.StatusOK, "prefs.html", data)
}

func (ctlr *RTOController) UpdatePreferences(c echo.Context) error {
	newDefaultDays := c.FormValue("defaultDays")
	newTargetDays := c.FormValue("targetDays")

	if newDefaultDays == "" || newTargetDays == "" {
		return c.String(http.StatusBadRequest, "Default Days and Target Days are required.")
	}

	// Call domain service to update preferences
	err := ctlr.service.UpdatePreferences(newDefaultDays, newTargetDays)
	if err != nil {
		ctlr.logger.Error("Error updating preferences", "error", err)
		return c.String(http.StatusInternalServerError, "Failed to update preferences.")
	}

	return c.Redirect(http.StatusSeeOther, "/prefs")
}

func initializeDefaultPreferences(db *gorm.DB, logger *slog.Logger) error {
	var count int64
	if err := db.Model(&types.Preferences{}).Count(&count).Error; err != nil {
		logger.Error("Failed to count preferences", "error", err)
		return err
	}

	if count == 0 {
		// No preferences found; create default
		prefs := types.Preferences{
			DefaultDays: "M,T,W,Th", // Default to first 4 days in week
			TargetDays:  "2.5",
		}
		if err := db.Create(&prefs).Error; err != nil {
			logger.Error("Failed to create default preferences", "error", err)
			return err
		}
		logger.Info("Default preferences created")
	} else {
		logger.Info("Preferences already exist")
	}

	return nil
}


=== End of internal/adapters/controller/prefs.go ===

package controller

import (
	"net/http"

	"time"

	"github.com/labstack/echo/v4"
)

// ToggleAttendanceRequest represents the JSON payload for toggling attendance
type ToggleAttendanceRequest struct {
	Date string `json:"date"` // Expected format: YYYY-MM-DD
}

// ToggleAttendanceResponse represents the JSON response after toggling
type ToggleAttendanceResponse struct {
	Success       bool    `json:"success"`
	NewStatus     string  `json:"newStatus,omitempty"` // "in" or "remote"
	Message       string  `json:"message,omitempty"`
	InOfficeCount int     `json:"inOfficeCount,omitempty"`
	TotalDays     int     `json:"totalDays,omitempty"`
	Average       float64 `json:"average,omitempty"`
	AverageDays   float64 `json:"averageDays,omitempty"`
	TargetDays    float64 `json:"targetDays,omitempty"` // New field for target value
}

// ToggleAttendance handles toggling attendance status for a given date
func (ctlr *RTOController) ToggleAttendance(c echo.Context) error {
	req := new(ToggleAttendanceRequest)
	if err := c.Bind(req); err != nil {
		ctlr.logger.Error("Error binding request", "error", err)
		return c.JSON(http.StatusBadRequest, ToggleAttendanceResponse{
			Success: false,
			Message: "Invalid request payload.",
		})
	}

	// Parse the date
	eventDate, err := time.Parse("2006-01-02", req.Date)
	if err != nil {
		ctlr.logger.Error("Error parsing date", "fn", "ToggleAttendance", "error", err)
		return c.JSON(http.StatusBadRequest, ToggleAttendanceResponse{
			Success: false,
			Message: "Invalid date format. Expected YYYY-MM-DD.",
		})
	}

	// Call domain service to toggle attendance
	newStatus, err := ctlr.service.ToggleAttendance(eventDate)
	if err != nil {
		ctlr.logger.Error("Error toggling attendance", "error", err)
		return c.JSON(http.StatusInternalServerError, ToggleAttendanceResponse{
			Success: false,
			Message: "Failed to toggle attendance.",
		})
	}

	// After toggling, recalculate stats
	stats, err := ctlr.service.CalculateAttendanceStats()
	if err != nil {
		ctlr.logger.Error("Error calculating stats", "error", err)
		return c.JSON(http.StatusInternalServerError, ToggleAttendanceResponse{
			Success: false,
			Message: "Failed to calculate attendance statistics.",
		})
	}

	return c.JSON(http.StatusOK, ToggleAttendanceResponse{
		Success:       true,
		NewStatus:     newStatus,
		InOfficeCount: stats.InOfficeCount,
		TotalDays:     stats.TotalDays,
		Average:       stats.Average,
		AverageDays:   stats.AverageDays,
		TargetDays:    stats.TargetDays,
	})
}


=== End of internal/adapters/controller/toggle.go ===

//go:generate mockery --name EventRepository
package repository

import (
	"time"

	"github.com/robstave/rto/internal/domain/types"
	"gorm.io/gorm"
)

type EventRepositorySQLite struct {
	db *gorm.DB
}

type EventRepository interface {
	GetAllEvents() ([]types.Event, error)
	AddEvent(event types.Event) error
	UpdateEvent(event types.Event) error
	DeleteEvent(eventID int) error
	GetEventByDate(date time.Time) (types.Event, error)
	GetEventByID(eventID int) (types.Event, error)
	GetEventsByType(eventType string) ([]types.Event, error)

	// New method to fetch event by date and type
	GetEventByDateAndType(date time.Time, eventType string) (types.Event, error)
	GetEventsByDate(date time.Time) ([]types.Event, error)
}

func NewEventRepositorySQLite(db *gorm.DB) EventRepository {
	return &EventRepositorySQLite{db: db}
}


=== End of internal/adapters/repositories/event_repository.go ===

package repository

import (
	"time"

	"github.com/robstave/rto/internal/domain/types"
)

func (r *EventRepositorySQLite) GetAllEvents() ([]types.Event, error) {
	var events []types.Event
	result := r.db.Order("date ASC").Find(&events)
	return events, result.Error
}

func (r *EventRepositorySQLite) AddEvent(event types.Event) error {
	result := r.db.Create(&event)
	return result.Error
}

func (r *EventRepositorySQLite) UpdateEvent(event types.Event) error {
	result := r.db.Save(&event)
	return result.Error
}

func (r *EventRepositorySQLite) DeleteEvent(eventID int) error {

	result := r.db.Delete(&types.Event{}, eventID)
	return result.Error
}

func (r *EventRepositorySQLite) GetEventByDate(date time.Time) (types.Event, error) {
	var event types.Event
	result := r.db.Where("date = ?", date).First(&event)
	return event, result.Error
}

func (r *EventRepositorySQLite) GetEventByID(eventID int) (types.Event, error) {
	var event types.Event
	result := r.db.First(&event, eventID)
	return event, result.Error
}

func (r *EventRepositorySQLite) GetEventsByType(eventType string) ([]types.Event, error) {
	var events []types.Event
	result := r.db.Where("type = ?", eventType).Order("date ASC").Find(&events)
	return events, result.Error
}

func (r *EventRepositorySQLite) GetEventsByDate(date time.Time) ([]types.Event, error) {
	var events []types.Event
	result := r.db.Where("date = ?", date).Order("date ASC").Find(&events)
	return events, result.Error
}

func (r *EventRepositorySQLite) GetEventByDateAndType(date time.Time, eventType string) (types.Event, error) {
	var event types.Event
	result := r.db.Where("date = ? AND type = ?", date, eventType).First(&event)
	return event, result.Error
}


=== End of internal/adapters/repositories/events.go ===

package repository

import (
	"github.com/robstave/rto/internal/domain/types"
)

func (r *PreferenceRepositorySQLite) GetPreferences() (types.Preferences, error) {
	var prefs types.Preferences
	result := r.db.First(&prefs)
	return prefs, result.Error
}

func (r *PreferenceRepositorySQLite) UpdatePreferences(prefs types.Preferences) error {
	result := r.db.Save(&prefs)
	return result.Error
}


=== End of internal/adapters/repositories/prefs.go ===

package repository

import (
	"log/slog"
)

type Service struct {
	eventRepo      EventRepository
	preferenceRepo PreferenceRepository
	logger         *slog.Logger
}


=== End of internal/adapters/repositories/service.go ===

//go:generate mockery --name PreferenceRepository
package repository

import (
	"github.com/robstave/rto/internal/domain/types"
	"gorm.io/gorm"
)

type PreferenceRepositorySQLite struct {
	db *gorm.DB
}

func NewPreferenceRepositorySQLite(db *gorm.DB) PreferenceRepository {
	return &PreferenceRepositorySQLite{db: db}
}

type PreferenceRepository interface {
	GetPreferences() (types.Preferences, error)
	UpdatePreferences(prefs types.Preferences) error
	// Add other methods as needed
}


=== End of internal/adapters/repositories/preference_repository.go ===

