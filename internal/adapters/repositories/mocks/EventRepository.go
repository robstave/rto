// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/robstave/rto/internal/domain/types"
)

// EventRepository is an autogenerated mock type for the EventRepository type
type EventRepository struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: event
func (_m *EventRepository) AddEvent(event types.Event) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEvent provides a mock function with given fields: eventID
func (_m *EventRepository) DeleteEvent(eventID int) error {
	ret := _m.Called(eventID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEvents provides a mock function with given fields:
func (_m *EventRepository) GetAllEvents() ([]types.Event, error) {
	ret := _m.Called()

	var r0 []types.Event
	if rf, ok := ret.Get(0).(func() []types.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByDate provides a mock function with given fields: date
func (_m *EventRepository) GetEventByDate(date time.Time) (types.Event, error) {
	ret := _m.Called(date)

	var r0 types.Event
	if rf, ok := ret.Get(0).(func(time.Time) types.Event); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByDateAndType provides a mock function with given fields: date, eventType
func (_m *EventRepository) GetEventByDateAndType(date time.Time, eventType string) (types.Event, error) {
	ret := _m.Called(date, eventType)

	var r0 types.Event
	if rf, ok := ret.Get(0).(func(time.Time, string) types.Event); ok {
		r0 = rf(date, eventType)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, string) error); ok {
		r1 = rf(date, eventType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByDateAndTypeBetween provides a mock function with given fields: eventType, start, end
func (_m *EventRepository) GetEventByDateAndTypeBetween(eventType string, start time.Time, end time.Time) (types.Event, error) {
	ret := _m.Called(eventType, start, end)

	var r0 types.Event
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) types.Event); ok {
		r0 = rf(eventType, start, end)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(eventType, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByID provides a mock function with given fields: eventID
func (_m *EventRepository) GetEventByID(eventID int) (types.Event, error) {
	ret := _m.Called(eventID)

	var r0 types.Event
	if rf, ok := ret.Get(0).(func(int) types.Event); ok {
		r0 = rf(eventID)
	} else {
		r0 = ret.Get(0).(types.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsBetweenDates provides a mock function with given fields: start, end
func (_m *EventRepository) GetEventsBetweenDates(start time.Time, end time.Time) ([]types.Event, error) {
	ret := _m.Called(start, end)

	var r0 []types.Event
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []types.Event); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByDate provides a mock function with given fields: date
func (_m *EventRepository) GetEventsByDate(date time.Time) ([]types.Event, error) {
	ret := _m.Called(date)

	var r0 []types.Event
	if rf, ok := ret.Get(0).(func(time.Time) []types.Event); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByType provides a mock function with given fields: eventType
func (_m *EventRepository) GetEventsByType(eventType string) ([]types.Event, error) {
	ret := _m.Called(eventType)

	var r0 []types.Event
	if rf, ok := ret.Get(0).(func(string) []types.Event); ok {
		r0 = rf(eventType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByTypeBetween provides a mock function with given fields: eventType, start, end
func (_m *EventRepository) GetEventsByTypeBetween(eventType string, start time.Time, end time.Time) ([]types.Event, error) {
	ret := _m.Called(eventType, start, end)

	var r0 []types.Event
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) []types.Event); ok {
		r0 = rf(eventType, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(eventType, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: event
func (_m *EventRepository) UpdateEvent(event types.Event) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewEventRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventRepository creates a new instance of EventRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventRepository(t mockConstructorTestingTNewEventRepository) *EventRepository {
	mock := &EventRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
